import { Model } from "sequelize";
import { Router, Request, Response, NextFunction, json } from "express";

type Constructor<T> = new (...args: any[]) => T;
type ModelType<T extends Model<T>> = Constructor<T> & typeof Model;
type Entry<T> = {
  [K in keyof T]: [K, T[K]];
}[keyof T];

function filterObject<T extends object>(
  obj: T,
  fn: (entry: Entry<T>, i: number, arr: Entry<T>[]) => boolean,
) {
  return Object.fromEntries(
    (Object.entries(obj) as Entry<T>[]).filter(fn),
  ) as Partial<T>;
}

export const autocrud = <T extends Model<T>>(
  inputModel: ModelType<T>,
): Router => {
  const modelRouter = Router();
  modelRouter.use(json());

  function validateInput(req: Request, res: Response, next: NextFunction) {
    const nonNullableFields = filterObject(
      inputModel.getAttributes(),
      ([k, v]) => {
        return (
          v.allowNull === false &&
          !v.defaultValue &&
          k.toString() !== "createdAt" && // TODO: find a better way to exclude createdAt and updatedAt from
          k.toString() !== "updatedAt" && // validation since they're auto generated but _autoGenerated is not public
          v.primaryKey !== true
        );
      },
    );

    const missingFields = Object.keys(nonNullableFields).filter(
      (propertyName) => {
        return !req.body.hasOwnProperty(propertyName);
      },
    );

    if (missingFields.length > 0) {
      return res.status(400).json({
        description: "The data sent is missing some fields",
        missingFields,
      });
    }

    next();
  }

  // modelRouter.use(validateInput);
  modelRouter.get("/", async (_: Request, res: Response) => {
    const allModels = await inputModel.findAll();
    return res.status(200).json(allModels);
  });

  modelRouter.get("/:modelId", async (req: Request, res: Response) => {
    const modelId = req.params.modelId;
    const model = await inputModel.findByPk(modelId);
    if (!model) {
      return res.status(404).send();
    }
    return res.status(200).json(model);
  });

  modelRouter.post(
    "/",
    [validateInput],
    async (req: Request, res: Response) => {
      const createdModel = Array.isArray(req.body)
        ? await inputModel.bulkCreate(req.body)
        : await inputModel.create(req.body);
      return res.status(201).json(createdModel);
    },
  );

  modelRouter.put(
    "/:modelId",
    [validateInput],
    async (req: Request, res: Response) => {
      const modelId = req.params.modelId;
      const modelToUpdate = await inputModel.findByPk(modelId);
      if (!modelToUpdate) {
        return res.status(404).send();
      }

      const updatedModel = await modelToUpdate.update(req.body);
      return res.status(200).json(updatedModel);
    },
  );

  modelRouter.delete("/:modelId", async (req: Request, res: Response) => {
    const modelId = req.params.modelId;
    const model = await inputModel.findByPk(modelId);
    if (!model) {
      return res.status(404).send();
    }
    await model.destroy();
    return res.status(200).send();
  });

  return modelRouter;
};
